apiVersion: v1
kind: Namespace
metadata:
  name: keycloak-demo

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: keycloak
  namespace: keycloak-demo
spec:
  replicas: 1
  selector:
    matchLabels:
      app: keycloak
  template:
    metadata:
      labels:
        app: keycloak
    spec:
      containers:
      - name: keycloak
        image: quay.io/keycloak/keycloak:18.0.1
        ports:
        - containerPort: 8080
        env:
        - name: KEYCLOAK_ADMIN
          valueFrom:
            secretKeyRef:
              name: keycloak-admin
              key: username
        - name: KEYCLOAK_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: keycloak-admin
              key: password
        volumeMounts:
        - name: keycloak-config
          mountPath: /opt/jboss/keycloak/standalone/configuration
      volumes:
      - name: keycloak-config
        persistentVolumeClaim:
          claimName: keycloak-config

---

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: keycloak-config
  namespace: keycloak-demo
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: keycloak-demo
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: postgres:14.5
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_USER
          value: postgres
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-password
              key: password
        volumeMounts:
        - name: postgres-data
          mountPath: /var/lib/postgresql/data
      volumes:
      - name: postgres-data
        persistentVolumeClaim:
          claimName: postgres-data

---

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-data
  namespace: keycloak-demo
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongodb
  namespace: keycloak-demo
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mongodb
  template:
    metadata:
      labels:
        app: mongodb
    spec:
      containers:
      - name: mongodb
        image: mongo:5.0
        ports:
        - containerPort: 27017
        volumeMounts:
        - name: mongodb-data
          mountPath: /data/db
      volumes:
      - name: mongodb-data
        persistentVolumeClaim:
          claimName: mongodb-data

---

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mongodb-data
  namespace: keycloak-demo
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: nifi
  namespace: keycloak-demo
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nifi
  template:
    metadata:
      labels:
        app: nifi
    spec:
      containers:
      - name: nifi
        image: apache/nifi:2.0.0
        ports:
        - containerPort: 8080
        env:
        - name: NIFI_WEB_PORT
          value: "8080"
        - name: NIFI_AUTH_TYPE
          value: "KEYCLOAK"
        - name: NIFI_KEYCLOAK_SERVER_URL
          value: "http://keycloak:8080/auth"
        - name: NIFI_KEYCLOAK_REALM
          value: "master"
        - name: NIFI_KEYCLOAK_CLIENT_ID
          value: "nifi"
        - name: NIFI_KEYCLOAK_CLIENT_SECRET
          valueFrom:
            secretKeyRef:
              name: nifi-keycloak
              key: secret
        volumeMounts:
        - name: nifi-data
          mountPath: /nifi
      volumes:
      - name: nifi-data
        persistentVolumeClaim:
          claimName: nifi-data

---

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: nifi-data
  namespace: keycloak-demo
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: pgadmin
  namespace: keycloak-demo
spec:
  replicas: 1
  selector:
    matchLabels:
      app: pgadmin
  template:
    metadata:
      labels:
        app: pgadmin
    spec:
      containers:
      - name: pgadmin
        image: dpage/pgadmin4:6.6
        ports:
        - containerPort: 5050
        env:
        - name: PGADMIN_DEFAULT_EMAIL
          value: "admin@pgadmin.org"
        - name: PGADMIN_DEFAULT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: pgadmin-password
              key: password
        - name: PGADMIN_SERVER_MODE
          value: "true"
        - name: PGADMIN_CONFIG_SERVER_MODE
          value: "true"
        - name: PGADMIN_SERVER_PORT
          value: "5432"
        - name: PGADMIN_SERVER_HOST
          value: "postgres"
        - name: PGADMIN_CONFIG_SERVER_HOST
          value: "postgres"
        - name: PGADMIN_AUTH_METHOD
          value: "keycloak"
        - name: PGADMIN_KEYCLOAK_SERVER_URL
          value: "http://keycloak:8080/auth"
        - name: PGADMIN_KEYCLOAK_REALM
          value: "master"
        - name: PGADMIN_KEYCLOAK_CLIENT_ID
          value: "pgadmin"
        - name: PGADMIN_KEYCLOAK_CLIENT_SECRET
          valueFrom:
            secretKeyRef:
              name: pgadmin-keycloak
              key: secret
        volumeMounts:
        - name: pgadmin-data
          mountPath: /var/lib/pgadmin4
      volumes:
      - name: pgadmin-data
        persistentVolumeClaim:
          claimName: pgadmin-data

---

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: pgadmin-data
  namespace: keycloak-demo
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongo-express
  namespace: keycloak-demo
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mongo-express
  template:
    metadata:
      labels:
        app: mongo-express
    spec:
      containers:
      - name: mongo-express
        image: mongo-express:0.58.2
        ports:
        - containerPort: 8081
        env:
        - name: MONGO_EXPRESS_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mongo-express-password
              key: password
        - name: MONGO_EXPRESS_AUTH_TYPE
          value: "KEYCLOAK"
        - name: MONGO_EXPRESS_KEYCLOAK_SERVER_URL
          value: "http://keycloak:8080/auth"
        - name: MONGO_EXPRESS_KEYCLOAK_REALM
          value: "master"
        - name: MONGO_EXPRESS_KEYCLOAK_CLIENT_ID
          value: "mongo-express"
        - name: MONGO_EXPRESS_KEYCLOAK_CLIENT_SECRET
          valueFrom:
            secretKeyRef:
              name: mongo-express-keycloak
              key: secret
      volumes:
      - name: mongo-express-data
        persistentVolumeClaim:
          claimName: mongo-express-data

---

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mongo-express-data
  namespace: keycloak-demo
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: jupyterlab
  namespace: keycloak-demo
spec:
  replicas: 1
  selector:
    matchLabels:
      app: jupyterlab
  template:
    metadata:
      labels:
        app: jupyterlab
    spec:
      containers:
      - name: jupyterlab
        image: jupyter/base-notebook:latest
        ports:
        - containerPort: 8888
        env:
        - name: JUPYTER_AUTH_TYPE
          value: "KEYCLOAK"
        - name: JUPYTER_KEYCLOAK_SERVER_URL
          value: "http://keycloak:8080/auth"
        - name: JUPYTER_KEYCLOAK_REALM
          value: "master"
        - name: JUPYTER_KEYCLOAK_CLIENT_ID
          value: "jupyterlab"
        - name: JUPYTER_KEYCLOAK_CLIENT_SECRET
          valueFrom:
            secretKeyRef:
              name: jupyterlab-keycloak
              key: secret
        volumeMounts:
        - name: jupyterlab-data
          mountPath: /home/jovyan/work
      volumes:
      - name: jupyterlab-data
        persistentVolumeClaim:
          claimName: jupyterlab-data

---

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: jupyterlab-data
  namespace: keycloak-demo
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi

---

apiVersion: v1
kind: Service
metadata:
  name: keycloak
  namespace: keycloak-demo
spec:
  type: LoadBalancer
  selector:
    app: keycloak
  ports:
  - port: 8080
    targetPort: 8080

---

apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: keycloak-demo
spec:
  type: ClusterIP
  selector:
    app: postgres
  ports:
  - port: 5432
    targetPort: 5432

---

apiVersion: v1
kind: Service
metadata:
  name: mongodb
  namespace: keycloak-demo
spec:
  type: ClusterIP
  selector:
    app: mongodb
  ports:
  - port: 27017
    targetPort: 27017

---

apiVersion: v1
kind: Service
metadata:
  name: nifi
  namespace: keycloak-demo
spec:
  type: LoadBalancer
  selector:
    app: nifi
  ports:
  - port: 8080
    targetPort: 8080

---

apiVersion: v1
kind: Service
metadata:
  name: pgadmin
  namespace: keycloak-demo
spec:
  type: LoadBalancer
  selector:
    app: pgadmin
  ports:
  - port: 5050
    targetPort: 5050

---

apiVersion: v1
kind: Service
metadata:
  name: mongo-express
  namespace: keycloak-demo
spec:
  type: LoadBalancer
  selector:
    app: mongo-express
  ports:
  - port: 8081
    targetPort: 8081

---

apiVersion: v1
kind: Service
metadata:
  name: jupyterlab
  namespace: keycloak-demo
spec:
  type: LoadBalancer
  selector:
    app: jupyterlab
  ports:
  - port: 8888
    targetPort: 8888

---

apiVersion: v1
kind: Secret
metadata:
  name: keycloak-admin
  namespace: keycloak-demo
type: Opaque
stringData:
  username: admin
  password: admin

---

apiVersion: v1
kind: Secret
metadata:
  name: postgres-password
  namespace: keycloak-demo
type: Opaque
stringData:
  password: postgres

---

apiVersion: v1
kind: Secret
metadata:
  name: nifi-keycloak
  namespace: keycloak-demo
type: Opaque
stringData:
  secret: "your-nifi-client-secret"

---

apiVersion: v1
kind: Secret
metadata:
  name: pgadmin-password
  namespace: keycloak-demo
type: Opaque
stringData:
  password: admin

---

apiVersion: v1
kind: Secret
metadata:
  name: pgadmin-keycloak
  namespace: keycloak-demo
type: Opaque
stringData:
  secret: "your-pgadmin-client-secret"

---

apiVersion: v1
kind: Secret
metadata:
  name: mongo-express-password
  namespace: keycloak-demo
type: Opaque
stringData:
  password: admin

---

apiVersion: v1
kind: Secret
metadata:
  name: mongo-express-keycloak
  namespace: keycloak-demo
type: Opaque
stringData:
  secret: "your-mongo-express-client-secret"

---

apiVersion: v1
kind: Secret
metadata:
  name: jupyterlab-keycloak
  namespace: keycloak-demo
type: Opaque
stringData:
  secret: "your-jupyterlab-client-secret"
