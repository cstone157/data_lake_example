# Don't just call kubectl apply -f [file_name] on this file.  You need to set the enviroment variables, 
#     in base64 encoding and then call "$ envsubst < [file_name] | kubectl apply -f -"
apiVersion: v1
kind: Namespace
metadata:
  name: stone-data-lake

---
apiVersion: v1
kind: Secret
metadata:
  name: stone-data-lake-secret
  namespace: stone-data-lake
  labels:
    app: postgres
type: Opaque
data:
    postgres_root_username: ${postgres_root_username_b64}
    postgres_root_password: ${postgres_root_password_b64}
    pgadmin_root_username: ${pgadmin_root_username_b64}
    pgadmin_root_password: ${pgadmin_root_password_b64}
    keycloak_admin_username: ${keycloak_admin_username_b64}
    keycloak_admin_password: ${keycloak_admin_password_b64}

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: stone-data-lake-configmap
  namespace: stone-data-lake
  labels:
    app: postgres
data:
  postgres-dbname: pg-data-lake

---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: postgres-pv
  namespace: stone-data-lake
spec:
  capacity:
    storage: 20Gi
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  storageClassName: local-storage
  local:
    path: /run/desktop/mnt/host/c/Users/c.stone/Documents/GitHub/data_lake_example/postgres/data
  nodeAffinity:
    required:
      nodeSelectorTerms:
        - matchExpressions:
            - key: kubernetes.io/hostname
              operator: In
              values:
                - docker-desktop
  volumeMode: Filesystem 

---

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
  namespace: stone-data-lake
spec:
  storageClassName: local-storage
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: stone-data-lake
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: postgres:14.5
        env:
          - name: POSTGRES_USER
            valueFrom:
              secretKeyRef:
                name: stone-data-lake-secret
                key: postgres_root_username
          - name: POSTGRES_PASSWORD
            valueFrom:
              secretKeyRef:
                name: stone-data-lake-secret
                key: postgres_root_password
          - name: POSTGRES_DB
            valueFrom:
              configMapKeyRef:
                name: stone-data-lake-configmap
                key: postgres-dbname
        ports:
        - containerPort: 5432
        volumeMounts:
        - name: postgres-data
          mountPath: /var/lib/postgresql/data
      volumes:
      - name: postgres-data
        persistentVolumeClaim:
          claimName: postgres-pvc

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: pgadmin
  namespace: stone-data-lake
spec:
  replicas: 1
  selector:
    matchLabels:
      app: pgadmin
  template:
    metadata:
      labels:
        app: pgadmin
    spec:
      containers:
      - name: pgadmin
        image: dpage/pgadmin4
        ports:
        - containerPort: 80
        env:
        - name: PGADMIN_DEFAULT_EMAIL
          valueFrom:
            secretKeyRef:
              name: stone-data-lake-secret
              key: pgadmin_root_username
        - name: PGADMIN_DEFAULT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: stone-data-lake-secret
              key: pgadmin_root_password
        - name: PGADMIN_CONFIG_SERVER_MODE
          value: "True"
        volumeMounts:
        - name: pgadmin-data
          mountPath: /var/lib/pgadmin
      volumes:
      - name: pgadmin-data
        emptyDir: {}

---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: keycloak-pv
  namespace: stone-data-lake
  labels:
    app: keycloak
spec:
  storageClassName: manual
  capacity:
    storage: 5Gi
  accessModes:
    - ReadWriteMany
  hostPath:
    path: "/mnt/data"

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: keycloak-pvc
  namespace: stone-data-lake
  labels:
    app: keycloak
spec:
  storageClassName: manual
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 3Gi

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: keycloak
  namespace: stone-data-lake
spec:
  replicas: 1
  selector:
    matchLabels:
      app: keycloak
  template:
    metadata:
      labels:
        app: keycloak
    spec:
      containers:
      - name: keycloak
        image: quay.io/keycloak/keycloak:18.0.1
        ports:
        - containerPort: 8080
        env:
        - name: KEYCLOAK_USER
          valueFrom:
            secretKeyRef:
              name: stone-data-lake-secret
              key: keycloak_admin_username
        - name: KEYCLOAK_PASSWORD
          valueFrom:
            secretKeyRef:
              name: stone-data-lake-secret
              key: keycloak_admin_password
        volumeMounts:
        - name: keycloak-data
          mountPath: /opt/keycloak/data
        command: ["/opt/jboss/keycloak/bin/standalone.sh", "-b", "0.0.0.0", "-c", "/opt/jboss/keycloak/standalone/standalone.xml"]
      volumes:
      - name: keycloak-data
        persistentVolumeClaim:
          claimName: keycloak-pvc

---
apiVersion: v1
kind: Service
metadata:
  name: pgadmin
  namespace: stone-data-lake
  labels:
    app: pgadmin
spec:
  selector:
   app: pgadmin
  type: NodePort
  ports:
  - protocol: TCP
    nodePort: 30200
    port: 80

---
apiVersion: v1
kind: Service
metadata:
  name: keycloak
  namespace: stone-data-lake
  labels:
    app: keycloak
spec:
  type: NodePort
  ports:
    - protocol: TCP
      nodePort: 30100
      port: 8080
  selector:
    app: keycloak